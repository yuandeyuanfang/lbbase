<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
  <display-name></display-name>	
  
  <!-- 过滤器统一处理字符集 -->
  <filter>
  	<filter-name>encodeFilter</filter-name>
  	<filter-class>com.lb.base.filter.EncodeFilter</filter-class>
  	<init-param>
        <param-name>encoding</param-name>
        <param-value>UTF-8</param-value>
    </init-param>
  </filter>
  <filter-mapping>
  	<filter-name>encodeFilter</filter-name>
  	<url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <!-- 使用原始servlet处理请求 -->
  <servlet>
  	<servlet-name>baseServlet</servlet-name>
  	<servlet-class>com.lb.base.servlet.BaseServlet</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>baseServlet</servlet-name>
  	<url-pattern>*.action</url-pattern>
  </servlet-mapping>
  
  <!-- 监听器 -->
  <listener>
  <listener-class>com.lb.base.listener.ServletContextListener</listener-class>
  </listener>
  
  <!-- 默认主页 -->
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
  <!-- 
  	url-pattern详解 

   l.以”/’开头和以”/*”结尾的是用来做路径映射的。

   2.以前缀”*.”开头的是用来做扩展映射的。 

   3. “/” 是用来定义default servlet映射的。 

   4. 剩下的都是用来定义详细映射的。比如： /aa/bb/cc.action 

   5.所以，为什么定义”/*.action”这样一个看起来很正常的匹配在启动tomcat时会报错？因为这个匹配即属于路径映射，也属于扩展映射，导致容器无法判断。

   6.*.do的优先级别最低
   -->
   
  <!-- 监听器，加载Spring配置文件 -->
  <listener> 
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class> 
  </listener>
  <!--
    - 定义了spring应用上下文xml配置文件的地址
    - 用于ContextLoaderServlet.
    -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
      classpath*:/config/spring/appContext-*.xml
    </param-value>
  </context-param>  
  
  <!-- 获取应用部署在WEB容器中的基准Url -->
  <filter>
    <filter-name>struts-cleanup</filter-name>
    <filter-class>org.apache.struts2.dispatcher.ActionContextCleanUp</filter-class>
	</filter>
  <!-- 
    - 采用struts2,struts2的Filter
    -->
  <filter>
    <filter-name>struts2</filter-name>
    <filter-class>
      org.apache.struts2.dispatcher.FilterDispatcher
    </filter-class>
  </filter>
  <!-- 拦截任何URL，以期在第一时间获取基准URL -->
  <filter-mapping>
    <filter-name>struts-cleanup</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <!-- struts2处理的URL配置,默认处理.do结尾的请求 -->
  <filter-mapping>
    <filter-name>struts2</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
   
</web-app>
